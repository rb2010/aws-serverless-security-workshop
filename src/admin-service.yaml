AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Admin API for managing for Wild Rydes Partners

Globals:
  Function:
    Timeout: 30
    Environment:
      Variables:
        SECRET_NAME: secure-serverless-db-secret # name of the RDS credentials in secrets manager

Parameters:
  InitResourceStack:
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
    Default: Secure-Serverless
  UserPoolArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/serverless-shopping-cart-demo/auth/user-pool-arn'
  UserPoolId:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/serverless-shopping-cart-demo/auth/user-pool-id'

# Resources:
#   CognitoUserPool:
#     Type: "AWS::Cognito::UserPool"
#     Properties:
#       UserPoolName: !Sub '${AWS::StackName}-users'

  PartnerDDBTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: ClientID
        Type: String
      TableName: !Sub '${AWS::StackName}-WildRydePartners'

  ManagePartnerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/
      Handler: managePartners.lambda_handler
      Runtime: nodejs20.x
      Policies:
        - VPCAccessPolicy: {}
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "cognito-idp:*"
              Resource: "*"
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "dynamodb:*"
              Resource: "*"
#        - Version: '2012-10-17'
#          Statement:
#            - Effect: Allow
#              Action:
#                - "secretsmanager:GetSecretValue"
#              Resource: "*"
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue: !Sub "${InitResourceStack}-LambdaSecurityGroup"
        SubnetIds:
          - Fn::ImportValue: !Sub "${InitResourceStack}-PrivateSubnet1"
          - Fn::ImportValue: !Sub "${InitResourceStack}-PrivateSubnet2"
      Events:
        CreatePartner:
          Type: Api
          Properties:
            Path: /partners
            Method: post
            RestApiId:
              Ref: UnicornPartnerApi
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoUserPool
          PARTNER_DDB_TABLE: !Ref PartnerDDBTable

  UnicornPartnerApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      DefinitionBody:
        swagger: "2.0"
        info:
          title:
            Ref: AWS::StackName
          description: Wild Ryde Admin API for managing partners
          version: 1.0.0
        ### TODO: add authorizer
        paths:
          "/partners":
            post:
#              security:
#                - CustomAuthorizer: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManagePartnerFunction.Arn}/invocations
              responses: {}
            options:
              consumes:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"

Outputs:
  ApiURL:
    Description: "API endpoint URL for dev environment"
    Value: !Sub "https://${UnicornApi}.execute-api.${AWS::Region}.amazonaws.com/dev/"